name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unit
          name: unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:2025.09.0
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_dbms_security_procedures_unrestricted: apoc.*
          NEO4J_apoc_export_file_enabled: true
          NEO4J_apoc_import_file_enabled: true
          NEO4J_dbms_security_procedures_allowlist: apoc.*
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download APOC plugin
        run: |
          mkdir -p plugins
          wget -O plugins/apoc-2025.09.0-core.jar https://github.com/neo4j/apoc/releases/download/2025.09.0/apoc-2025.09.0-core.jar

      - name: Copy APOC to Neo4j container
        run: |
          docker ps
          CONTAINER_ID=$(docker ps --filter "ancestor=neo4j:2025.09.0" --format "{{.ID}}")
          docker cp plugins/apoc-2025.09.0-core.jar $CONTAINER_ID:/var/lib/neo4j/plugins/
          docker restart $CONTAINER_ID
          sleep 20

      - name: Wait for Neo4j to be ready
        run: |
          for i in {1..30}; do
            if wget --spider --quiet http://localhost:7474; then
              echo "Neo4j is ready"
              break
            fi
            echo "Waiting for Neo4j... ($i/30)"
            sleep 2
          done

      - name: Verify APOC installation
        run: |
          CONTAINER_ID=$(docker ps --filter "ancestor=neo4j:2025.09.0" --format "{{.ID}}")
          docker exec $CONTAINER_ID cypher-shell -u neo4j -p testpassword "CALL apoc.help('version') YIELD name RETURN count(name) as count" || echo "APOC verification failed (non-critical for tests)"

      - name: Run integration tests
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: testpassword
        run: |
          pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: integration
          name: integration-tests

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:2025.09.0
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_dbms_security_procedures_unrestricted: apoc.*
          NEO4J_apoc_export_file_enabled: true
          NEO4J_apoc_import_file_enabled: true
          NEO4J_dbms_security_procedures_allowlist: apoc.*
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Neo4j to be ready
        run: |
          for i in {1..30}; do
            if wget --spider --quiet http://localhost:7474; then
              echo "Neo4j is ready"
              break
            fi
            echo "Waiting for Neo4j... ($i/30)"
            sleep 2
          done

      - name: Run e2e tests
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: testpassword
        run: |
          pytest tests/e2e/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: e2e
          name: e2e-tests

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black (formatter check)
        run: |
          black --check src/ tests/

      - name: Run Flake8 (linter)
        run: |
          flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Run mypy (type checker)
        run: |
          mypy src/ --ignore-missing-imports
